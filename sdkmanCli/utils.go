package sdkmanCli

import (
	"crypto/tls"
	"io/ioutil"
	"log"
	"net/http"
	"os"
	"os/exec"
	"strings"
)

func SecureCurl(url string) string {
	if os.Getenv("sdkman_insecure_ssl") == "true" {
		client := &http.Client{Transport: &http.Transport{
			TLSClientConfig: &tls.Config{InsecureSkipVerify: true},
		}}

		req, err := http.NewRequest("GET", url, nil)
		if err != nil {
			// handle err
		}

		resp, err := client.Do(req)
		if err != nil {
			// handle err
		}
		defer resp.Body.Close()
		data, err := ioutil.ReadAll(resp.Body)
		return string(data)
	} else {
		// Generated by curl-to-Go: https://mholt.github.io/curl-to-go
		resp, err := http.Get(url)
		if err != nil {
			// handle err
		}
		defer resp.Body.Close()
		data, err := ioutil.ReadAll(resp.Body)
		return string(data)
	}
}

func Pager (pages string) {
	pager := os.Getenv("PAGER")
	if pager == "" {
		pager = "more"
	}
	c1 := exec.Command(pager)
	c1.Stdin = strings.NewReader(pages)
	c1.Stdout = os.Stdout
	err := c1.Start()
	c1.Wait()
	if err != nil {
		log.Fatal(err)
	}
}